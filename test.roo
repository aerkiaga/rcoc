/* This is an example file to test rcoc */

// basic syntax
let implication_is_reflexive:
    @(T: Prop, x: T) T
=
    |T: Prop, x: T| {|y: T| y}(x)
;

// -> operator
let implication_works:
    @(T, P: Prop) T -> {T -> P} -> P
=
    |T, P: Prop, x: T, y: T -> P| y(x)
;

// exists() operator
let consequent_always_exists:
    @(T: Prop) exists(P: Prop) T -> P
=
    |T, Q: Prop|
    |h: @(P: Prop) {T -> P} -> Q|
    h(T)(|x: T| x)
;

// /\ operator
let conjunction_implies_operand:
    @(A, B: Prop) A /\ B -> A
=
    |A, B: Prop|
    |h: @(P: Prop) {A -> B -> P} -> P|
    h(A, |x: A, y: B| x)
;

// \/ operator
let disjunction_is_commutative:
    @(A, B: Prop) A \/ B -> B \/ A
=
    |A, B: Prop|
    |h: @(P: Prop) {A -> P} -> {B -> P} -> P|
    h(B \/ A)(
        // proof that A -> B \/ A
        |a: A, Q: Prop|
        |_: B -> Q, aq: A -> Q|
        aq(a)
    )(
        // proof that B -> B \/ A
        |b: B, Q: Prop|
        |bq: B -> Q, _: A -> Q|
        bq(b)
    )
;

// ^ operator and False
let proposition_and_its_negation_is_false:
    @(A: Prop) ^{A /\ ^A}
=
    |A: Prop|
    |h: @(Q:Prop) {A -> {A -> False} -> Q} -> Q|
    h(@(P: Prop) P)(
        |a: A, not_a: A -> False| not_a(a)
    )
;

// using previous terms
let disjunction_of_implication_is_commutative:
    @(A, B: Prop) {A -> B} \/ {B -> A} -> {B -> A} \/ {A -> B}
=
    |A, B: Prop|
    disjunction_is_commutative(A -> B, B -> A)
;

// <-> operator
let equivalence_implies_implication:
    @(A, B: Prop) A <-> B -> A -> B
=
    |A, B: Prop|
    |h: {A -> B} /\ {B -> A}|
    |a: A|
    conjunction_implies_operand(A -> B, B -> A, h, a)
;

// inductive types
let nat: Set = recursive(self: Set) @(T: ?) T -> {self -> T} -> T;

let O: nat = |T: ?(nat), a: T, b: nat -> T| a;
let S: nat -> nat = |x: nat| |T: ?(nat), a: T, b: nat -> T| b(x);

let add: nat -> nat -> nat = recursive(self: nat -> nat -> nat) |n, m: nat| n(
    nat, m, |p: nat| S(self(p, m))
);


