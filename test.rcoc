/* This is an example file to test rcoc */

// basic syntax
let proof_a:
    @(T: Prop, x: T) T
=
    |T: Prop, x: T| {|y: T| y}(x)
;

// -> operator
let proof_b:
    @(T, P: Prop) T -> {T -> P} -> P
=
    |T, P: Prop, x: T, y: T -> P| y(x)
;

// exists() operator
let proof_c:
    @(T: Prop) exists(P: Prop) T -> P
=
    |T, Q: Prop|
    |h: @(P: Prop) {T -> P} -> Q|
    h(T)(|x: T| x)
;

// /\ operator
let proof_d:
    @(A, B: Prop) A /\ B -> A
=
    |A, B: Prop|
    |h: @(P: Prop) {A -> B -> P} -> P|
    h(A, |x: A, y: B| x)
;

// \/ operator
let proof_e:
    @(A, B: Prop) A \/ B -> B \/ A
=
    |A, B: Prop|
    |h: @(P: Prop) {A -> P} -> {B -> P} -> P|
    h(B \/ A)(
        // proof that A -> B \/ A
        |a: A, Q: Prop|
        |_: B -> Q, aq: A -> Q|
        aq(a)
    )(
        // proof that B -> B \/ A
        |b: B, Q: Prop|
        |bq: B -> Q, _: A -> Q|
        bq(b)
    )
;

// ^ operator
let proof_f:
    @(A: Prop) A /\ ^A -> @(P: Prop) P
=
    |A: Prop|
    |h: @(Q:Prop) {A -> {A -> @(R:Prop) R} -> Q} -> Q|
    h(@(P: Prop) P)(
        |a: A, not_a: A -> @(R:Prop) R| not_a(a)
    )
;





